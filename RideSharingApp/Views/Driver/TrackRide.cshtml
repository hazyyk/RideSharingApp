@model RideSharingApp.Models.RideBooking
@{
    ViewData["Title"] = "Track Driver";
    var bookingId = Model.BookingID;
    var pickupLat = Model.PickupLocation?.Latitude ?? 0;
    var pickupLng = Model.PickupLocation?.Longitude ?? 0;
    var dropoffLat = Model.DropoffLocation?.Latitude ?? 0;
    var dropoffLng = Model.DropoffLocation?.Longitude ?? 0;
    var startLat = pickupLat + 0.01;
    var startLng = pickupLng + 0.01;
}

<h2>Tracking Your Pickup (Simulated)</h2>
<div id="map" style="height: 400px;"></div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/polyline-encoded"></script>

    <script>
        const pickupLat = @Model.PickupLocation.Latitude;
        const pickupLng = @Model.PickupLocation.Longitude;

        // Simulated driver location initially a bit away
        let driverLat = pickupLat + 0.01;
        let driverLng = pickupLng + 0.01;

        let map = L.map('map').setView([pickupLat, pickupLng], 14);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        let customerMarker = L.marker([pickupLat, pickupLng]).addTo(map).bindPopup("Customer Location").openPopup();
        let driverMarker = L.marker([driverLat, driverLng]).addTo(map).bindPopup("Driver Location");
        let routeLine;

        function updateRoute() {
            if (routeLine) map.removeLayer(routeLine);

            fetch(`https://graphhopper.com/api/1/route?point=${driverLat},${driverLng}&point=${pickupLat},${pickupLng}&type=json&vehicle=car&key=29f7be32-d45d-47cb-a324-d5f481781715`)
                .then(res => res.json())
                .then(data => {
                    if (!data.paths || data.paths.length === 0) {
                        console.warn("No route found.");
                        return;
                    }

                    const path = data.paths[0];
                    const coords = L.Polyline.fromEncoded(path.points).getLatLngs();

                    routeLine = L.polyline(coords, { color: 'blue', weight: 5 }).addTo(map);
                    map.fitBounds(routeLine.getBounds());
                })
                .catch(err => {
                    console.error("Failed to load route:", err);
                });
        }

        // Initial route draw
        updateRoute();

        // Simulate driver movement toward pickup point
        setInterval(() => {
            driverLat -= 0.0005;
            driverLng -= 0.0005;

            driverMarker.setLatLng([driverLat, driverLng]);
            updateRoute();
        }, 3000); // Update every 3 seconds
    </script>
}
