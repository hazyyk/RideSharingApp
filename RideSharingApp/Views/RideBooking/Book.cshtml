@model RideSharingApp.Models.RideBookingViewModel
@{
    ViewData["Title"] = "Book a Ride";
}

<div class="container mt-5">
    <div class="row">
        <!-- Ride Booking Form -->
        <div class="col-md-6">
            <h2 class="mb-4">Book a Ride</h2>
            <form asp-action="Book" method="post">
                <div asp-validation-summary="All" class="text-danger"></div>

                <div class="mb-3">
                    <label asp-for="PickupAddress" class="form-label"></label>
                    <input asp-for="PickupAddress" class="form-control" />
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="PickupLatitude" class="form-label"></label>
                        <input asp-for="PickupLatitude" class="form-control" type="number" step="any" id="pickupLat" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="PickupLongitude" class="form-label"></label>
                        <input asp-for="PickupLongitude" class="form-control" type="number" step="any" id="pickupLon" />
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="DropoffAddress" class="form-label"></label>
                    <input asp-for="DropoffAddress" class="form-control" />
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="DropoffLatitude" class="form-label"></label>
                        <input asp-for="DropoffLatitude" class="form-control" type="number" step="any" id="dropLat" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="DropoffLongitude" class="form-label"></label>
                        <input asp-for="DropoffLongitude" class="form-control" type="number" step="any" id="dropLon" />
                    </div>
                </div>

                <div class="d-flex gap-2 mt-4">
                    <button type="submit" class="btn btn-primary">Book Ride</button>
                    <button type="button" class="btn btn-info" onclick="showRoute()">Preview Route</button>
                    <button type="button" class="btn btn-secondary" onclick="useCurrentLocation()">Use Current Location</button>
                </div>
            </form>
        </div>

        <!-- Route Preview -->
        <div class="col-md-6">
            <h3>Route Preview</h3>
            <div id="map" style="height: 400px;" class="mb-3"></div>
            <div id="paymentPreview"></div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/polyline-encoded"></script>

    <script>
        let map, pickupMarker, dropoffMarker, routeLine;

        function isInVietnam(lat, lon) {
            return lat >= 8.18 && lat <= 23.39 && lon >= 102.14 && lon <= 109.46;
        }

        document.addEventListener("DOMContentLoaded", function () {
            map = L.map('map').setView([14.0583, 108.2772], 6);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
        });

        function useCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;

                    document.getElementById('pickupLat').value = lat;
                    document.getElementById('pickupLon').value = lon;

                    if (pickupMarker) map.removeLayer(pickupMarker);
                    pickupMarker = L.marker([lat, lon]).addTo(map).bindPopup("Pickup (Current Location)").openPopup();
                    map.setView([lat, lon], 13);
                }, function (error) {
                    alert("Geolocation error: " + error.message);
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        function showRoute() {
            const pickupLat = parseFloat(document.getElementById('pickupLat').value);
            const pickupLon = parseFloat(document.getElementById('pickupLon').value);
            const dropLat = parseFloat(document.getElementById('dropLat').value);
            const dropLon = parseFloat(document.getElementById('dropLon').value);

            if (!pickupLat || !pickupLon || !dropLat || !dropLon) {
                alert("Please enter valid pickup and dropoff coordinates.");
                return;
            }

            if (!isInVietnam(pickupLat, pickupLon) || !isInVietnam(dropLat, dropLon)) {
                alert("Pickup and dropoff locations must be within Vietnam.");
                return;
            }

            if (pickupMarker) map.removeLayer(pickupMarker);
            if (dropoffMarker) map.removeLayer(dropoffMarker);
            if (routeLine) map.removeLayer(routeLine);

            pickupMarker = L.marker([pickupLat, pickupLon]).addTo(map).bindPopup("Pickup").openPopup();
            dropoffMarker = L.marker([dropLat, dropLon]).addTo(map).bindPopup("Dropoff").openPopup();
            map.setView([pickupLat, pickupLon], 13);

            fetch(`https://graphhopper.com/api/1/route?point=${pickupLat},${pickupLon}&point=${dropLat},${dropLon}&type=json&vehicle=car&key=29f7be32-d45d-47cb-a324-d5f481781715`)
                .then(res => res.json())
                .then(data => {
                    if (!data.paths || data.paths.length === 0) {
                        alert("No route found.");
                        return;
                    }

                    const path = data.paths[0];
                    const coords = L.Polyline.fromEncoded(path.points).getLatLngs();

                    routeLine = L.polyline(coords, { color: 'blue', weight: 5 }).addTo(map);
                    map.fitBounds(routeLine.getBounds());

                    const distanceKm = path.distance / 1000;
                    const ratePerKm = 10000;
                    const amountVND = distanceKm * ratePerKm;

                    const paymentPreview = document.getElementById('paymentPreview');
                    paymentPreview.innerHTML = `
                        <div class="alert alert-info">
                            Estimated Distance: ${distanceKm.toFixed(2)} km<br />
                            Estimated Cost: ${amountVND.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}
                        </div>`;
                })
                .catch(err => {
                    console.error("Error loading route:", err);
                    alert("Failed to load route.");
                });
        }
    </script>
}
